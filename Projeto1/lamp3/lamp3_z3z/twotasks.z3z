% --- Generated the 20/10/2019 at 15:17 --- %
% --- heptagon compiler, version 1.03.00 (compiled thu. may. 3 2:35:29 CET 2018) --- %
% --- Command line: /usr/local/bin/heptc -target c -target z3z -s twotasks lamp3.ept --- %

set_reorder(2);read("Property.lib");read("Synthesis.lib");read("Verif_Determ.lib");read("Simul.lib");read("Synthesis_Partial_order.lib");read("Orbite.lib");
% -- dependencies --- %

% ---------- process twotasks ---------- %

declare(twotasks_b1, twotasks_b2, twotasks_b3, twotasks_c1, twotasks_c2,
        twotasks_c3, twotasks_ck_1, twotasks_pnr_2, twotasks_ck_3_1,
        twotasks_pnr_1, twotasks_ck_5_1, twotasks_pnr, twotasks_error_state);
conditions : [twotasks_b1, twotasks_b2, twotasks_b3, twotasks_c1,
              twotasks_c2, twotasks_c3];
states : [twotasks_ck_1, twotasks_pnr_2, twotasks_ck_3_1, twotasks_pnr_1,
          twotasks_ck_5_1, twotasks_pnr, twotasks_error_state];
controllables : [twotasks_c1, twotasks_c2, twotasks_c3];
evolutions : [];
initialisations : [];
twotasks_b : twotasks_b1;
twotasks_c : twotasks_c1;
twotasks_b_1 : twotasks_b2;
twotasks_c_1 : twotasks_c2;
twotasks_b_2 : twotasks_b3;
twotasks_c_2 : twotasks_c3;
twotasks_v_5 : (not twotasks_c);
twotasks_v_6 : (twotasks_v_5 or twotasks_b);
twotasks_s_6_St_3_On_1 : ((1 when twotasks_v_6) default -1);
twotasks_r_2_St_3_On : ((1 when twotasks_v_6) default twotasks_pnr_2);
twotasks_v_7 : (twotasks_c and twotasks_b);
twotasks_s_6_St_3_Off_1 : ((-1 when twotasks_v_7) default 1);
twotasks_s_6_1 : ((twotasks_s_6_St_3_Off_1 when twotasks_ck_1)
  default twotasks_s_6_St_3_On_1);
twotasks_r_2_St_3_Off : ((1 when twotasks_v_7) default twotasks_pnr_2);
twotasks_r_2 : ((twotasks_r_2_St_3_Off when twotasks_ck_1)
  default twotasks_r_2_St_3_On);
twotasks_ck_2_1 : twotasks_s_6_1;
twotasks_ns_2_St_3_On_1 : -1;
twotasks_nr_2_St_3_On : -1;
twotasks_s_St_3_On : 1;
twotasks_ns_2_St_3_Off_1 : 1;
twotasks_ns_2_1 : ((twotasks_ns_2_St_3_Off_1 when twotasks_ck_2_1)
  default twotasks_ns_2_St_3_On_1);
twotasks_nr_2_St_3_Off : -1;
twotasks_nr_2 : ((twotasks_nr_2_St_3_Off when twotasks_ck_2_1)
  default twotasks_nr_2_St_3_On);
twotasks_s_St_3_Off : -1;
twotasks_s : ((twotasks_s_St_3_Off when twotasks_ck_2_1)
  default twotasks_s_St_3_On);
twotasks_s1 : twotasks_s;
twotasks_v_8 : (not twotasks_c_1);
twotasks_v_9 : (twotasks_v_8 or twotasks_b_1);
twotasks_s_5_St_2_On_1 : ((1 when twotasks_v_9) default -1);
twotasks_r_1_St_2_On : ((1 when twotasks_v_9) default twotasks_pnr_1);
twotasks_v_10 : (twotasks_c_1 and twotasks_b_1);
twotasks_s_5_St_2_Off_1 : ((-1 when twotasks_v_10) default 1);
twotasks_s_5_1 : ((twotasks_s_5_St_2_Off_1 when twotasks_ck_3_1)
  default twotasks_s_5_St_2_On_1);
twotasks_r_1_St_2_Off : ((1 when twotasks_v_10) default twotasks_pnr_1);
twotasks_r_1 : ((twotasks_r_1_St_2_Off when twotasks_ck_3_1)
  default twotasks_r_1_St_2_On);
twotasks_ck_4_1 : twotasks_s_5_1;
twotasks_ns_1_St_2_On_1 : -1;
twotasks_nr_1_St_2_On : -1;
twotasks_s_1_St_2_On : 1;
twotasks_ns_1_St_2_Off_1 : 1;
twotasks_ns_1_1 : ((twotasks_ns_1_St_2_Off_1 when twotasks_ck_4_1)
  default twotasks_ns_1_St_2_On_1);
twotasks_nr_1_St_2_Off : -1;
twotasks_nr_1 : ((twotasks_nr_1_St_2_Off when twotasks_ck_4_1)
  default twotasks_nr_1_St_2_On);
twotasks_s_1_St_2_Off : -1;
twotasks_s_1 : ((twotasks_s_1_St_2_Off when twotasks_ck_4_1)
  default twotasks_s_1_St_2_On);
twotasks_s2 : twotasks_s_1;
twotasks_v_11 : (not twotasks_c_2);
twotasks_v_12 : (twotasks_v_11 or twotasks_b_2);
twotasks_s_4_St_1_On_1 : ((1 when twotasks_v_12) default -1);
twotasks_r_St_1_On : ((1 when twotasks_v_12) default twotasks_pnr);
twotasks_v_13 : (twotasks_c_2 and twotasks_b_2);
twotasks_s_4_St_1_Off_1 : ((-1 when twotasks_v_13) default 1);
twotasks_s_4_1 : ((twotasks_s_4_St_1_Off_1 when twotasks_ck_5_1)
  default twotasks_s_4_St_1_On_1);
twotasks_r_St_1_Off : ((1 when twotasks_v_13) default twotasks_pnr);
twotasks_r : ((twotasks_r_St_1_Off when twotasks_ck_5_1)
  default twotasks_r_St_1_On);
twotasks_ck_6_1 : twotasks_s_4_1;
twotasks_ns_St_1_On_1 : -1;
twotasks_nr_St_1_On : -1;
twotasks_s_2_St_1_On : 1;
twotasks_ns_St_1_Off_1 : 1;
twotasks_ns_1_2 : ((twotasks_ns_St_1_Off_1 when twotasks_ck_6_1)
  default twotasks_ns_St_1_On_1);
twotasks_nr_St_1_Off : -1;
twotasks_nr : ((twotasks_nr_St_1_Off when twotasks_ck_6_1)
  default twotasks_nr_St_1_On);
twotasks_s_2_St_1_Off : -1;
twotasks_s_2 : ((twotasks_s_2_St_1_Off when twotasks_ck_6_1)
  default twotasks_s_2_St_1_On);
twotasks_s3 : twotasks_s_2;
initialisations : concat(initialisations, [(twotasks_ck_1 = 1)]);
evolutions : concat(evolutions, [(twotasks_ns_2_1 default twotasks_ck_1)]);
initialisations : concat(initialisations, [(twotasks_pnr_2 = -1)]);
evolutions : concat(evolutions, [(twotasks_nr_2 default twotasks_pnr_2)]);
initialisations : concat(initialisations, [(twotasks_ck_3_1 = 1)]);
evolutions : concat(evolutions, [(twotasks_ns_1_1 default twotasks_ck_3_1)]);
initialisations : concat(initialisations, [(twotasks_pnr_1 = -1)]);
evolutions : concat(evolutions, [(twotasks_nr_1 default twotasks_pnr_1)]);
initialisations : concat(initialisations, [(twotasks_ck_5_1 = 1)]);
evolutions : concat(evolutions, [(twotasks_ns_1_2 default twotasks_ck_5_1)]);
initialisations : concat(initialisations, [(twotasks_pnr = -1)]);
evolutions : concat(evolutions, [(twotasks_nr default twotasks_pnr)]);
twotasks_v : (twotasks_s1 and twotasks_s2);
twotasks_v_3 : (twotasks_v and twotasks_s3);
twotasks_v_4 : (not twotasks_v_3);
twotasks_assume : 1;
twotasks_guarantee : twotasks_v_4;
initialisations : concat(initialisations, [(twotasks_error_state = 1)]);
evolutions : concat(evolutions, [twotasks_guarantee]);
constraints : [((twotasks_b1^2) = 1), ((twotasks_b2^2) = 1), ((twotasks_b3^2)
               = 1), ((twotasks_c1^2) = 1), ((twotasks_c2^2) = 1),
               ((twotasks_c3^2) = 1), (twotasks_assume = 1)];

% --- outputs : [twotasks_s1, twotasks_s2, twotasks_s3] --- %
twotasks : processus(conditions, states, evolutions, initialisations,
                     [gen(constraints)], controllables);
twotasks_init : initial(twotasks);
twotasks : S_Security(twotasks,B_True(twotasks,twotasks_error_state));
dcs_result : equal(twotasks_init,initial(twotasks));
if dcs_result then
    print("twotasks: synthesis succeeded.")
else
    print("twotasks: synthesis failed.");

if dcs_result then
    print("Triangulation and controller generation...")
else
    quit(1);
declare(p_twotasks_c1, p_twotasks_c2, p_twotasks_c3);
phantom_vars : [p_twotasks_c1, p_twotasks_c2, p_twotasks_c3];
twotasks_triang : Triang(constraint(twotasks),controllables,phantom_vars);
controller_inputs : [twotasks_b1, twotasks_b2, twotasks_b3, twotasks_ck_1,
                     twotasks_pnr_2, twotasks_ck_3_1, twotasks_pnr_1,
                     twotasks_ck_5_1, twotasks_pnr, p_twotasks_c1,
                     p_twotasks_c2, p_twotasks_c3];
heptagon_controller("twotasks_controller.ept","twotasks",controller_inputs,controllables,twotasks_triang);

